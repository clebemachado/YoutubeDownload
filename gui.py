
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import ssl

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk, CENTER
from turtle import back


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

class AppInicial(Tk):
    def __init__(self, ) -> None:
        super().__init__()
        self.title("")
        self.geometry("566x500")
        self.configure(bg = "#FFFFFF")
        self.resizable(False, False)
        self.iconbitmap("assets/icon_windows.ico")
        #self.iconbitmap("icon_windows.ico")
        self.canvas = Canvas( self, bg = "#FFFFFF", height = 500, width = 566,
            bd = 0, highlightthickness = 0, relief = "ridge"
        )
        self.canvas.place(x = 0, y = 0)
        
        # Título da aplicação
        self.canvas.create_text(26.0, 8.0, anchor="nw", text="YOUTUBE DOWNLOAD",
            fill="#000000", font=("MulishRoman Bold", 24 * -1)
        )
        
        # Botão settings
        self.settings_image = PhotoImage(file=relative_to_assets("settings.png"))
        self.settings = Button(image=self.settings_image, borderwidth=0,
            highlightthickness=0, command= self.settingsConfig,
            relief="flat"
        )
        self.settings.place( x=473.0, y=11.0, width=24.0, height=24.0)

        # Várias criações de retângulos
        self.cavasConfig()
        
        # Parte do INPUT
        self.imagemUrl = PhotoImage(file=relative_to_assets("imagemUrl.png"))
        self.image_1 = self.canvas.create_image(49.0, 78.0,
            image=self.imagemUrl
        )
        
        # ENTRY
        self.imagemEntry = PhotoImage(file=relative_to_assets("Input.png"))
        self.entry_bg_1 = self.canvas.create_image(
            242.5, 78.0, image=self.imagemEntry)
        self.url_entry = Entry(bd=0, bg="#F1F1F1", highlightthickness=0)
        self.url_entry.place(x=81.0, y=54.0, width=323.0, height=46.0)
        # Botão carregar vídeos
        self.button_image_carregar = PhotoImage(
            file=relative_to_assets("button_carregar.png"))
        self.button_carregar = Button(
            image=self.button_image_carregar,
            borderwidth=0, highlightthickness=0,
            command= self.buscar_videos,
            relief="flat"
        )
        self.button_carregar.place( x=429.0,  y=55.0, width=111.0, height=47.0)

        # Configurações do estilo
        self.style = ttk.Style()
        self.styleConfig()
        

        self.tree = ttk.Treeview(self, columns=("c1", "c2", "c3"), show="headings", height=13,)
        self.configTreeView()
        self.tree.place(x=26, y = 129)
        
        self.button_download_image = PhotoImage(file=relative_to_assets("button_download.png"))
        self.button_download = Button(
            image=self.button_download_image,
            borderwidth=0,
            highlightthickness=0,
            command= self.download_videos,
            relief="flat"
        )
        
        
        
    def styleConfig(self, ):
        self.style.configure("Treeview", #background ="#D3D3D3",
                    foreground = "black", rowheight = 22, #fieldbackground ="silver"                
        )

        self.style.map("Treeview", background=[("selected", "red")])
        
        
    def configTreeView(self, ):
        self.tree.heading("c1", text="Id")
        self.tree.heading("c2", text="Título")
        self.tree.heading("c3", text="Progresso")
        self.tree.column("c1", anchor = CENTER, minwidth=40, width=40, 
                        stretch= False) 
        self.tree.column("c2", minwidth=385, width=385, stretch= True) 
        self.tree.column("c3", anchor = CENTER, minwidth=50, width=85, 
                            stretch= True)
        self.tree.bind('<Button-1>', self.handle_click)
        self.tree.bind("<Double-1>", self.OnDoubleClick)
    
    
    def cavasConfig(self, ):
        self.canvas.create_rectangle(26.0, 54.0, 392.0, 102.0, fill="#C4C4C4",
        outline="")
        
        self.canvas.create_rectangle(26.0, 129.0, 540.0, 441.0, 
                                        fill="#F2F2F2", outline="")
    
    
    def OnDoubleClick(self, event):
        pass
    
    def handle_click(self, event):
        if self.tree.identify_region(event.x, event.y) == "separator":
            return "break"
    
    def settingsConfig(self,):
        pass

    def buscar_videos(self, ):
        pass
    
    def download_videos(self,):
        pass
    
